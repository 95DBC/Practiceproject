package com.com.raymond.downloader.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.raymond.mvpdemo.model.bean.UserIcon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ICON".
*/
public class UserIconDao extends AbstractDao<UserIcon, Long> {

    public static final String TABLENAME = "USER_ICON";

    /**
     * Properties of entity UserIcon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IconID = new Property(0, Long.class, "IconID", true, "_id");
        public final static Property UserIcon = new Property(1, String.class, "UserIcon", false, "USER_ICON");
    }


    public UserIconDao(DaoConfig config) {
        super(config);
    }
    
    public UserIconDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ICON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: IconID
                "\"USER_ICON\" TEXT);"); // 1: UserIcon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ICON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserIcon entity) {
        stmt.clearBindings();
 
        Long IconID = entity.getIconID();
        if (IconID != null) {
            stmt.bindLong(1, IconID);
        }
 
        String UserIcon = entity.getUserIcon();
        if (UserIcon != null) {
            stmt.bindString(2, UserIcon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserIcon entity) {
        stmt.clearBindings();
 
        Long IconID = entity.getIconID();
        if (IconID != null) {
            stmt.bindLong(1, IconID);
        }
 
        String UserIcon = entity.getUserIcon();
        if (UserIcon != null) {
            stmt.bindString(2, UserIcon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserIcon readEntity(Cursor cursor, int offset) {
        UserIcon entity = new UserIcon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // IconID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // UserIcon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserIcon entity, int offset) {
        entity.setIconID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserIcon(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserIcon entity, long rowId) {
        entity.setIconID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserIcon entity) {
        if(entity != null) {
            return entity.getIconID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserIcon entity) {
        return entity.getIconID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
